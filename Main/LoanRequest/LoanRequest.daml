module Main.LoanRequest.LoanRequest where


import Main.Loan.Loan qualified as LoanModule     
import Main.Loan.LoanLimit qualified as LimitModule  
import Main.Utils.Utils
import DA.Assert
import DA.Time


template LoanRequest
  with
    id : LoanRequestKey
    borrower : Party
    bank : Party
    borrowerAccountId : AccountId
    loanRequestId : Text
    loanAmount : Decimal
    loanTerm : Int
    requestDate : Time
  where 
    signatory borrower
    observer bank

    consuming choice ApproveRequest : (ContractId LoanModule.Loan, ContractId LimitModule.LoanLimit)
      with 
        loanLimitContractId : ContractId LimitModule.LoanLimit
      controller bank
        do
          now <- getTime
          assertMsg "LoanAmount must be greater than 0" (loanAmount > 0.0)
          assertMsg "LoanTerm must be greater than 0" (loanTerm > 0)
          
          loanLimit <- fetch loanLimitContractId
          let estimateUsedAmount = loanLimit.loanAmountUsed + loanAmount
          assertMsg "LoanAmount exceeds the limit" (estimateUsedAmount <= loanLimit.loanAmountLimit)

          loan <- create LoanModule.Loan with
            borrower = borrower
            bank = bank
            loanRequestId = loanRequestId
            principal = loanAmount
            interestRate = 7.5
            termInMonths = loanTerm
            monthlyEMI = (loanAmount * 7.5 / 100.00) / 12.00
            startDate = now

          updateUsedLoanLimit <- exercise loanLimitContractId LimitModule.SetLoanAmountExhausted with 
            _loanAmountUsed = estimateUsedAmount

          pure (loan, updateUsedLoanLimit)