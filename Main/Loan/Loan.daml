module Main.Loan.Loan where

import Main.Token.Token as TokenModule
import Main.Utils.Utils
import DA.Assert
import DA.Time

import qualified DA.Set as Set

template Loan
  with
    borrower: Party
    bank: Party
    loanRequestId : Text
    principal: Decimal
    interestRate: Decimal
    termInMonths: Int
    startDate: Time
    monthlyEMI: Decimal
  where
    signatory bank, borrower

    choice Disburse : ContractId Loan
      controller bank
      do
        now <- getTime
        let numberOfTokens = (fromIntegral termInMonths) * monthlyEMI

        let dummyAccount = AccountId with accountOperator = bank, accountNumber=""
            -- borrowerAccount : AccountId = fromOptional dummyAccount "UUID-893848-ISYS-989"

        tokenTransferContractId <- create TokenModule.Token
          with
            id = TokenId with accountOperator = dummyAccount.accountOperator, accountNumber=dummyAccount.accountNumber, loanRequestId
            bank
            holderAccount = dummyAccount
            loanRequestId
            tokenQty = numberOfTokens
            modifiedTime = Some now
            signatories = Set.fromList $ [bank]
            
        create Loan with
          borrower, bank, loanRequestId, principal, interestRate, termInMonths, startDate, monthlyEMI

       
     
    choice Repay : ContractId Loan  
      with
        monthlyEMI: Decimal
        termInMonths: Int
        startDate: Time
      controller borrower
      do
        now <- getTime
        -- let _principal = (principal - monthlyEMI)
        assertMsg "Monthly EMI should be greater than 0" (monthlyEMI > 0.0)
        assertMsg "Term in months should be greater than 0" (termInMonths > 0)
        assertMsg "Start date should be in the past" (startDate < now)
        create Loan with
          borrower, bank, loanRequestId, principal, interestRate, termInMonths, startDate, monthlyEMI
